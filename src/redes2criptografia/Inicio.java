/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redes2criptografia;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author ximen
 */
public class Inicio extends javax.swing.JFrame {

    boolean flagCifraCesar = true;
    boolean flagCifraXOR = true;
    boolean flagSDES = true;
    BufferedImage bufferImagem;
    JFileChooser fileChooser = new JFileChooser();
    Random gerador = new Random();
    Color color;
    int randomico;
    int randomicoSDES;
    File fileImagem;
    ImageIcon iconImagem;
    Raster rasterImagem;
    String K1;
    String K2;
    

    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setSize(700, 550);
        jPanel1.setSize(700, 550);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        lblImagem = new javax.swing.JLabel();
        btnCifraDeCesar = new javax.swing.JButton();
        btnCifraXOR = new javax.swing.JButton();
        btnSDes = new javax.swing.JButton();
        btnCarregarArquivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        lblImagem.setBackground(new java.awt.Color(255, 0, 51));
        lblImagem.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(lblImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(36, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jScrollPane1.setViewportView(jPanel2);

        btnCifraDeCesar.setText("Cifra de Cesar");
        btnCifraDeCesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCifraDeCesarActionPerformed(evt);
            }
        });

        btnCifraXOR.setText("Cifra XOR");
        btnCifraXOR.setActionCommand("");
        btnCifraXOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCifraXORActionPerformed(evt);
            }
        });

        btnSDes.setText("S-DES");
        btnSDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSDesActionPerformed(evt);
            }
        });

        btnCarregarArquivo.setText("Carregar Arquivo");
        btnCarregarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarArquivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, Short.MAX_VALUE)
                        .addComponent(btnCarregarArquivo)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCifraDeCesar)
                        .addGap(116, 116, 116)
                        .addComponent(btnCifraXOR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                        .addComponent(btnSDes)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(24, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnCarregarArquivo)
                .addGap(355, 355, 355)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCifraDeCesar)
                    .addComponent(btnCifraXOR)
                    .addComponent(btnSDes))
                .addContainerGap(83, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(123, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarregarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarArquivoActionPerformed
        fileChooser.setDialogTitle("Importar imagem");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            iconImagem = new ImageIcon(fileChooser.getSelectedFile().getPath());
            fileImagem = new File(fileChooser.getSelectedFile().getPath());
            randomico = gerador.nextInt(254) + 1;
            randomicoSDES = gerador.nextInt(510) + 513;
            lblImagem.setIcon(iconImagem);
        }
    }//GEN-LAST:event_btnCarregarArquivoActionPerformed

    private void btnCifraXORActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCifraXORActionPerformed
         File fileImagem1 =  fileImagem ;

        if (flagCifraXOR) {
           
            //Criptografar 
            btnCifraDeCesar.setEnabled(false);
            btnSDes.setEnabled(false);
            flagCifraXOR = false;
            
            System.out.println(randomico);
            try {
                bufferImagem = ImageIO.read(fileImagem1);
                for (int i = 0; i < bufferImagem.getWidth(); i++) {
                    for (int j = 0; j < bufferImagem.getHeight(); j++) {
                        color = new Color(bufferImagem.getRGB(i, j));

                        int red = color.getRed() ^ randomico;    //R
                        int green = color.getGreen() ^ randomico;  //G
                        int blue = color.getBlue() ^ randomico;   //B
                        if (red > 255) {
                            red = red % 256;
                        }
                        if (green > 255) {
                            green = green % 256;
                        }
                        if (blue > 255) {
                            blue = blue % 256;
                        }
                        bufferImagem.setRGB(i, j, new Color(red, green, blue).getRGB());
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            // System.out.println(bufferImagem);
            try {
                ImageIO.write(bufferImagem, "PNG", new File("CriptografouXOR.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            iconImagem = new ImageIcon("CriptografouXOR.png");
            lblImagem.setIcon(iconImagem);
            System.out.println("Final Criptografia");
            
        } else {
            //Desincriptografar
            btnCifraDeCesar.setEnabled(true);
            btnSDes.setEnabled(true);
            flagCifraXOR = true;
             try {
                fileImagem1 = new File("CriptografouXOR.png");
                bufferImagem = ImageIO.read(fileImagem1);
                for (int i = 0; i < bufferImagem.getWidth(); i++) {
                    for (int j = 0; j < bufferImagem.getHeight(); j++) {
                        color = new Color(bufferImagem.getRGB(i, j));

                        int red = color.getRed() ^ randomico;    //R
                        int green = color.getGreen() ^ randomico;  //G
                        int blue = color.getBlue() ^ randomico;

                        if (red < 0) {
                            red = red + 255;
                        }
                        if (green < 0) {
                            green = green + 255;
                        }
                        if (blue < 0) {
                            blue = blue + 255;
                        }

                        bufferImagem.setRGB(i, j, new Color(red, green, blue).getRGB());

                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            // System.out.println(bufferImagem);
            try {
                ImageIO.write(bufferImagem, "PNG", new File("DescriptografouXOR.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            
            
            iconImagem = new ImageIcon("DescriptografouXOR.png");
            lblImagem.setIcon(iconImagem);
            System.out.print("Final Descriptografia");
        }
    }//GEN-LAST:event_btnCifraXORActionPerformed

    private void btnCifraDeCesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCifraDeCesarActionPerformed

         File fileImagem2 =  fileImagem ;

        if (flagCifraCesar) {
            //Criptografar
            btnCifraXOR.setEnabled(false);
            btnSDes.setEnabled(false);
            flagCifraCesar = false;

            System.out.println(randomico);
            try {
                bufferImagem = ImageIO.read(fileImagem2);
                for (int i = 0; i < bufferImagem.getWidth(); i++) {
                    for (int j = 0; j < bufferImagem.getHeight(); j++) {
                        color = new Color(bufferImagem.getRGB(i, j));

                        int red = color.getRed() + randomico;    //R
                        int green = color.getGreen() + randomico;  //G
                        int blue = color.getBlue() + randomico;   //B
                        if (red > 255) {
                            red = red % 256;
                        }
                        if (green > 255) {
                            green = green % 256;
                        }
                        if (blue > 255) {
                            blue = blue % 256;
                        }
                        bufferImagem.setRGB(i, j, new Color(red, green, blue).getRGB());
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            // System.out.println(bufferImagem);
            try {
                ImageIO.write(bufferImagem, "PNG", new File("CriptografouCesar.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            iconImagem = new ImageIcon("CriptografouCesar.png");
            lblImagem.setIcon(iconImagem);
            System.out.println("Final Criptografia");

        } else {
            //Desincriptografar
            btnCifraXOR.setEnabled(true);
            btnSDes.setEnabled(true);
            flagCifraCesar = true;

            try {
                fileImagem2 = new File("CriptografouCesar.png");
                bufferImagem = ImageIO.read(fileImagem2);
                for (int i = 0; i < bufferImagem.getWidth(); i++) {
                    for (int j = 0; j < bufferImagem.getHeight(); j++) {
                        color = new Color(bufferImagem.getRGB(i, j));

                        int red = color.getRed() - randomico;    //R
                        int green = color.getGreen() - randomico;  //G
                        int blue = color.getBlue() - randomico;   //B

                        if (red < 0) {
                            red = red + 255;
                        }
                        if (green < 0) {
                            green = green + 255;
                        }
                        if (blue < 0) {
                            blue = blue + 255;
                        }

                        bufferImagem.setRGB(i, j, new Color(red, green, blue).getRGB());

                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            // System.out.println(bufferImagem);
            try {
                ImageIO.write(bufferImagem, "PNG", new File("DescriptografouCesar.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            iconImagem = new ImageIcon("DescriptografouCesar.png");
            lblImagem.setIcon(iconImagem);
            System.out.print("Final Descriptografia");
        }
    }//GEN-LAST:event_btnCifraDeCesarActionPerformed
    private void btnSDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSDesActionPerformed
   
        
         File fileImagem3 =  fileImagem ;
        if (flagSDES) {
            //Criptografar 
            btnCifraDeCesar.setEnabled(false);
            btnCifraXOR.setEnabled(false);
            flagSDES = false;
           
            String chaveK = devolveP10(randomicoSDES);
            //Gera chave randomica de 10 bits ok

            
            String rotacao1 = ls(chaveK.substring(0, 5));
            String rotacao2 = ls(chaveK.substring(5, 10));
            //rotacao ls de 10 para k1 ok
            
            K1 = devolveP8(Integer.parseInt(rotacao1+""+rotacao2));
            //PERMUTACAO DE 10 PARA 8 para k1 OK

            rotacao1 = ls(rotacao1.substring(0, 5));
            rotacao2 = ls(rotacao2.substring(0, 5));
             //rotacao ls de 10 para k2 ok
             
            K2 = devolveP8(Integer.parseInt(rotacao1+""+rotacao2));
            //PERMUTACAO DE 10 PARA 8 para k2 OK
            
            
            

            try {
             bufferImagem = ImageIO.read(fileImagem);
             for (int i = 0; i < bufferImagem.getWidth(); i++) {
             for (int j = 0; j < bufferImagem.getHeight(); j++) {
             color = new Color(bufferImagem.getRGB(i, j));

             
             
             
             //pega cor vermelha em binario
             String r = Integer.toBinaryString(color.getRed());
             //pega cor verde em binario
             String g = Integer.toBinaryString(color.getGreen());        
             //pega cor azul em binario  
             String b = Integer.toBinaryString(color.getBlue());

             //transforma cor vermelha para 8 bits
             String red = String.format("%08d", Integer.parseInt(r));
             //transforma cor verde para 8 bits
             String green = String.format("%08d", Integer.parseInt(g));
             //transforma cor azul para 8 bits
             String blue = String.format("%08d", Integer.parseInt(b));

             //permuta cor vermelha
             String IPr = devolveIP((red));
             //permuta cor verde
             String IPg = devolveIP((green));
             //permuta cor azul
             String IPb = devolveIP((blue));
             
             
             
             String R1 = F(IPr.substring(0, 4), IPr.substring(4, 8), K1);
             String R2 = F(R1.substring(0, 4), R1.substring(4, 8), K2);
             String R = devolveIP1(R2);
             
             String G1 = F(IPg.substring(0, 4), IPg.substring(4, 8), K1);
             String G2 = F(G1.substring(0, 4), G1.substring(4, 8), K2);
             String G = devolveIP1(G2);
             
             String B1 = F(IPb.substring(0, 4), IPb.substring(4, 8), K1);
             String B2 = F(B1.substring(0, 4), B1.substring(4, 8), K2);
             String B = devolveIP1(B2);

             
             
             
             
             

            bufferImagem.setRGB(i, j, new Color(Integer.parseInt(R,2),Integer.parseInt(G,2),Integer.parseInt(B,2)).getRGB());
             }
             }
             } catch (IOException ex) {
             Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
             }
            try {
                ImageIO.write(bufferImagem, "PNG", new File("CriptografouSDES.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            iconImagem = new ImageIcon("CriptografouSDES.png");
            lblImagem.setIcon(iconImagem);
            System.out.println("Final Criptografia");
            
        } else {
            //Desincriptografar
            btnCifraDeCesar.setEnabled(true);
            btnCifraXOR.setEnabled(true);
            flagSDES = true;
            //Criptografar 
            btnCifraDeCesar.setEnabled(false);
            btnCifraXOR.setEnabled(false);
            flagSDES = false;
           
            String chaveK = devolveP10(randomicoSDES);
            //Gera chave randomica de 10 bits ok

            
            String rotacao1 = ls(chaveK.substring(0, 5));
            String rotacao2 = ls(chaveK.substring(5, 10));
            //rotacao ls de 10 para k1 ok
            
            //PERMUTACAO DE 10 PARA 8 para k1 OK

           
             //rotacao ls de 10 para k2 ok
             
            //PERMUTACAO DE 10 PARA 8 para k2 OK
            
            
            

            try {
                fileImagem3 = new File("CriptografouSDES.png");
                bufferImagem = ImageIO.read(fileImagem3);       
                
                for (int i = 0; i < bufferImagem.getWidth(); i++) {
             for (int j = 0; j < bufferImagem.getHeight(); j++) {
             color = new Color(bufferImagem.getRGB(i, j));

             
             
             
             //pega cor vermelha em binario
             String r = Integer.toBinaryString(color.getRed());
             //pega cor verde em binario
             String g = Integer.toBinaryString(color.getGreen());        
             //pega cor azul em binario  
             String b = Integer.toBinaryString(color.getBlue());

             //transforma cor vermelha para 8 bits
             String red = String.format("%08d", Integer.parseInt(r));
             //transforma cor verde para 8 bits
             String green = String.format("%08d", Integer.parseInt(g));
             //transforma cor azul para 8 bits
             String blue = String.format("%08d", Integer.parseInt(b));

             //permuta cor vermelha
             String IPr = devolveIP((red));
             //permuta cor verde
             String IPg = devolveIP((green));
             //permuta cor azul
             String IPb = devolveIP((blue));
             
             
             
             String R1 = F(IPr.substring(0, 4), IPr.substring(4, 8), K2);
             String R2 = F(R1.substring(0, 4), R1.substring(4, 8), K1);
             String R = devolveIP1(R2);
             
             String G1 = F(IPg.substring(0, 4), IPg.substring(4, 8), K2);
             String G2 = F(G1.substring(0, 4), G1.substring(4, 8), K1);
             String G = devolveIP1(G2);
             
             String B1 = F(IPb.substring(0, 4), IPb.substring(4, 8), K2);
             String B2 = F(B1.substring(0, 4), B1.substring(4, 8), K1);
             String B = devolveIP1(B2);

             
             
             
             
             

            bufferImagem.setRGB(i, j, new Color(Integer.parseInt(R,2),Integer.parseInt(G,2),Integer.parseInt(B,2)).getRGB());
             }
             }
             } catch (IOException ex) {
             Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
             }
            try {
                ImageIO.write(bufferImagem, "PNG", new File("DescriptografouSDES.png"));
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

            iconImagem = new ImageIcon("DescriptografouSDES.png");
            lblImagem.setIcon(iconImagem);
            System.out.println("Final Criptografia");
            
            
        }
       
    }//GEN-LAST:event_btnSDesActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }
    
    public String devolveP10(int randomico) {

        String chave = Integer.toBinaryString(randomico);
        String binario = String.format("%10d", Integer.parseInt(chave));

        //System.out.println(binario);
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(4));
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(6));
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(9));
        sb.append(binario.charAt(0));
        sb.append(binario.charAt(8));
        sb.append(binario.charAt(7));
        sb.append(binario.charAt(5));
        
        String permutacao = sb.substring(0, 10);
        
      
        return permutacao;
    }
    public String devolveP8(int randomico) {

        String binario = Integer.toBinaryString(randomico);
        
        //System.out.println(binario);
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(5));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(6));
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(7));
        sb.append(binario.charAt(4));
        sb.append(binario.charAt(9));
        sb.append(binario.charAt(8));
        
        String permutacao = sb.substring(0, 8);
        
      
        return permutacao;
    } 
    
     public String devolveIP(String cor) {

        String binario = cor;
                
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(5));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(0));
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(7));
        sb.append(binario.charAt(4));
        sb.append(binario.charAt(6));
        
        String permutacao = sb.substring(0, 8);
        
      
        return permutacao;
    } 
     
     public String devolveIP1(String cor) {

        String binario = cor;
        
        //System.out.println(binario);
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(0));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(4));
        sb.append(binario.charAt(6));
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(7));
        sb.append(binario.charAt(5));
        
        String permutacao = sb.substring(0, 8);
        
      
        return permutacao;
    } 
     
     public String devolveEP(String randomico) {

        String binario = randomico;
       
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(0));
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(0));
        
        String permutacao = sb.substring(0, 8);
      
        return permutacao;
    } 
     
     public String devolveP4(String randomico) {

         
        String binario = randomico;
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(binario.charAt(1));
        sb.append(binario.charAt(3));
        sb.append(binario.charAt(2));
        sb.append(binario.charAt(0));
       
        
        String permutacao = sb.substring(0, 4);
        

        return permutacao;
    } 
    
    public String ls(String txt) {
        
        String primeiro = txt.charAt(0) + "";
        String ls = txt.substring(1,5)+primeiro;
        
        
        return ls;
    }
    
    public String F(String txt1, String txt2, String k) {
     //permuta ultimos 4 bits da cor para obter 8 bits
     String EP8 = devolveEP(txt2);
     
     //transforma ep em int
     int EP = Integer.parseInt(EP8);
     
     //faz xor de ep com k
     int EPxorK = Integer.parseInt(EP8, 2) ^ Integer.parseInt(k, 2);
     
     String xorBinario = Integer.toBinaryString(EPxorK);
     String xor = String.format("%08d", Integer.parseInt(xorBinario));


     //divide xor em dois
     
     String xor0 = (xor).substring(0,4);
     String xor1 = (xor).substring(4,8);  
     
     String s0linha = xor0.charAt(0)+""+xor0.charAt(3);
     String s0coluna = xor0.charAt(1)+""+xor0.charAt(2);
     
     
     String s1linha = xor1.charAt(0)+""+xor1.charAt(3);
     String s1coluna = xor1.charAt(1)+""+xor1.charAt(2);


     
     int ms0 [][] = {{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2}};
     int ms1 [][] = {{0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3}};
     
     int linha0 = Integer.parseInt(s0linha,2);
     int coluna0 = Integer.parseInt(s0coluna,2);
     
     int linha1 = Integer.parseInt(s1linha,2);
     int coluna1 = Integer.parseInt(s1coluna,2);
     
   
     
     
     String numero0 = Integer.toBinaryString(ms0[linha0][coluna0]);
     String numero1 = Integer.toBinaryString(ms1[linha1][coluna1]);


     
     String numeroResultante = (String.format("%02d", Integer.parseInt(numero0))+""+String.format("%02d", Integer.parseInt(numero1)));
     

     String p4 = devolveP4(numeroResultante);
          
     int xorP4 = Integer.parseInt(txt1,2) ^ Integer.parseInt(p4,2);

     String xorp4Binario = Integer.toBinaryString(xorP4);
     
     //System.out.println(xorP4);

     String sw = String.format("%04d", Integer.parseInt(xorp4Binario))+""+String.format("%04d", Integer.parseInt(txt2));
     
     

     return sw;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarregarArquivo;
    private javax.swing.JButton btnCifraDeCesar;
    private javax.swing.JButton btnCifraXOR;
    private javax.swing.JButton btnSDes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImagem;
    // End of variables declaration//GEN-END:variables
}
